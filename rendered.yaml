---
# Source: open-appsec-k8s-nginx-ingress/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: open-appsec-open-appsec-k8s-nginx-ingress
  namespace: choreo-ingress-controllers
automountServiceAccountToken: true
---
# Source: open-appsec-k8s-nginx-ingress/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: open-appsec-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.8
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "Q1p6aVhqS2dVQQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: open-appsec-k8s-nginx-ingress/templates/appsec-settings-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "appsec-settings-secret"
  namespace: choreo-ingress-controllers
data:
  CROWDSEC_AUTH_DATA: MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA=
---
# Source: open-appsec-k8s-nginx-ingress/templates/appsec-settings-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "appsec-settings-configmap"
  namespace: choreo-ingress-controllers
data:
  CROWDSEC_ENABLED: "false"
  CROWDSEC_API_URL: http://crowdsec-service:8080/v1/decisions/stream
  CROWDSEC_AUTH_METHOD: apikey
  CROWDSEC_MODE: prevent
  CROWDSEC_LOGGING: enabled
---
# Source: open-appsec-k8s-nginx-ingress/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: open-appsec-open-appsec-k8s-nginx-ingress-controller
  namespace: choreo-ingress-controllers
data:
---
# Source: open-appsec-k8s-nginx-ingress/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
  name: open-appsec-open-appsec-k8s-nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
      - namespaces
    verbs:
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - list
      - watch
      - get
  - apiGroups:
      - openappsec.io
    resources:
      - '*'
    verbs:
      - get
      - list
      - watch
---
# Source: open-appsec-k8s-nginx-ingress/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
  name: open-appsec-open-appsec-k8s-nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: open-appsec-open-appsec-k8s-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: open-appsec-open-appsec-k8s-nginx-ingress
    namespace: choreo-ingress-controllers
  - kind: ServiceAccount
    name: tuning-svc-account
    namespace: "default"
---
# Source: open-appsec-k8s-nginx-ingress/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: open-appsec-open-appsec-k8s-nginx-ingress
  namespace: choreo-ingress-controllers
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - secrets
    resourceNames:
      - open-appsec-open-appsec-k8s-nginx-ingress-controller
    verbs:
      - list
      - watch
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  # Omit Ingress status permissions if `--update-status` is disabled.
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    resourceNames:
      - open-appsec-open-appsec-k8s-nginx-ingress-leader
    verbs:
      - get
      - update
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - list
      - watch
      - get
  - apiGroups:
      - openappsec.io
    resources:
      - '*'
    verbs:
      - get
      - list
      - watch
---
# Source: open-appsec-k8s-nginx-ingress/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: open-appsec-open-appsec-k8s-nginx-ingress
  namespace: choreo-ingress-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: open-appsec-open-appsec-k8s-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: open-appsec-open-appsec-k8s-nginx-ingress
    namespace: choreo-ingress-controllers
---
# Source: open-appsec-k8s-nginx-ingress/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: open-appsec-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.8
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/component: primary
---
# Source: open-appsec-k8s-nginx-ingress/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: open-appsec-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.8
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/component: primary
---
# Source: open-appsec-k8s-nginx-ingress/templates/controller-service-webhook.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: open-appsec-open-appsec-k8s-nginx-ingress-controller-admission
  namespace: choreo-ingress-controllers
spec:
  type: ClusterIP
  ports:
    - name: https-webhook
      port: 443
      targetPort: webhook
      appProtocol: https
  selector:
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/component: controller
---
# Source: open-appsec-k8s-nginx-ingress/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: open-appsec-open-appsec-k8s-nginx-ingress-controller
  namespace: choreo-ingress-controllers
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ipFamilyPolicy: SingleStack
  ipFamilies: 
    - IPv4
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      appProtocol: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
      appProtocol: https
  selector:
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/component: controller
---
# Source: open-appsec-k8s-nginx-ingress/templates/appsec.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: open-appsec-open-appsec-k8s-nginx-ingress-controller
  namespace: choreo-ingress-controllers
  annotations: 
    checkov.io/skip1: CKV_K8S_20=Default is set by NIC
    checkov.io/skip2: CKV_K8S_38=Default is set by NIC
    checkov.io/skip3: CKV_K8S_25=Default is set by NIC
    checkov.io/skip4: CKV_K8S_22=Default is set by NIC
    checkov.io/skip5: CKV_K8S_40=Default is set by NIC
    checkov.io/skip6: CKV_K8S_AZURE_WSO2_2=Default is set by NIC
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
      app.kubernetes.io/instance: open-appsec
      app.kubernetes.io/component: controller
  replicas: 1
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
        app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
        app.kubernetes.io/instance: open-appsec
        app.kubernetes.io/version: "1.1.27"
        app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: controller
    spec:
      dnsPolicy: ClusterFirst
      securityContext:
        readOnlyRootFilesystem: true
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: open-appsec
          securityContext:
            
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          image: "choreocontrolplane.azurecr.io/agent:1.1.29"
          command:
          - /cp-nano-agent
          imagePullPolicy: Always
          args:
          - --hybrid-mode
          - --fog
          - https://inext-agents.cloud.ngen.checkpoint.com/
          ports:
            - containerPort: 7465
              name: prometheus-port
          env:
            - name: appsecClassName
              value: 
            - name: user_email
              value: 
            - name: registered_server
              value: "NGINX Server"
            - name: LOCAL_TUNING_ENABLED
              value: "false"
            - name: PLAYGROUND
              value: "true"
            - name: CRDS_SCOPE
              value: cluster
          envFrom:
          - configMapRef:
              name: appsec-settings-configmap
          - secretRef:
              name: appsec-settings-secret
          resources:
            
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
          - name: advanced-model
            mountPath: /advanced-model
        - name: controller
          image: "choreocontrolplane.azurecr.io/openappsec-nginx-attachment:1.0.0"
          imagePullPolicy: IfNotPresent
          lifecycle: 
            preStop:
              exec:
                command:
                - /wait-shutdown
          args: 
            - /nginx-ingress-controller
            - --publish-service=choreo-ingress-controllers/choreo-external-ingress-controller
            - --election-id=open-appsec-open-appsec-k8s-nginx-ingress-leader
            - --controller-class=k8s.io/appsec-nginx
            - --ingress-class=choreo-external-ingress-class
            - --configmap=$(POD_NAMESPACE)/open-appsec-open-appsec-k8s-nginx-ingress-controller
            - --validating-webhook=:8443
            - --validating-webhook-certificate=/usr/local/certificates/cert
            - --validating-webhook-key=/usr/local/certificates/key
            - --configmap=choreo-ingress-controllers/choreo-external-ingress-controller
            - --default-ssl-certificate=choreo-ingress-controllers/choreo-dev-wildcard-tls-secret
            - --election-id=open-appsec-ingress-leader
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          livenessProbe: 
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe: 
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: webhook
              containerPort: 8443
              protocol: TCP
          volumeMounts:
            - name: webhook-cert
              mountPath: /usr/local/certificates/
              readOnly: true
          resources: 
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
      nodeSelector: 
        kubernetes.io/os: linux
      serviceAccountName: open-appsec-open-appsec-k8s-nginx-ingress
      terminationGracePeriodSeconds: 300
      volumes:
        - name: advanced-model
          configMap:
            name: advanced-model-config
            optional: true
        - name: webhook-cert
          secret:
            secretName: open-appsec-open-appsec-k8s-nginx-ingress-admission
---
# Source: open-appsec-k8s-nginx-ingress/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: open-appsec-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.8
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: open-appsec-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: open-appsec
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: open-appsec-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.2.8
        app.kubernetes.io/instance: open-appsec
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: open-appsec
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.2.0-debian-11-r21
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: open-appsec-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: open-appsec-k8s-nginx-ingress/templates/controller-ingressclass.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: choreo-external-ingress-class
spec:
  controller: k8s.io/appsec-nginx
---
# Source: open-appsec-k8s-nginx-ingress/templates/controller-poddisruptionbudget.yaml
# PDB is not supported for DaemonSets.
# https://github.com/kubernetes/kubernetes/issues/108124
---
# Source: open-appsec-k8s-nginx-ingress/templates/default-policy.yaml
apiVersion: openappsec.io/v1beta1
kind: CustomResponse
metadata:
  name: 403-forbidden
spec:
  mode: response-code-only ## configurable modes: {block-page|redirect|response-code-only}
  message-title: ""
  message-body: ""
  http-response-code: 403
---
# Source: open-appsec-k8s-nginx-ingress/templates/default-policy.yaml
apiVersion: openappsec.io/v1beta1
kind: LogTrigger
metadata:
  name: appsec-log-trigger
spec:
  appsec-logging:
    detect-events: true
    prevent-events: true
    all-web-requests: false
  additional-suspicious-events-logging:
    enabled: true
    minimum-severity: high # {high|critical}
    response-body: false
    response-code: true
  extended-logging:
    url-path: true
    url-query: true
    http-headers: false
    request-body: false
  log-destination:
    cloud: true
    stdout:
      format: json-formatted
---
# Source: open-appsec-k8s-nginx-ingress/templates/default-policy.yaml
apiVersion: openappsec.io/v1beta1
kind: Practice
metadata:
  name: appsec-best-practice
spec:
  web-attacks:
    override-mode: prevent-learn
    minimum-confidence: high
  anti-bot:
    injected-URIs: []
    validated-URIs: []
  snort-signatures:
    configmap: []
  openapi-schema-validation:
    configmap: []
---
# Source: open-appsec-k8s-nginx-ingress/templates/admission-webhooks/validating-webhook.yaml
# before changing this value, check the required kubernetes version
# https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#prerequisites
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  name: open-appsec-open-appsec-k8s-nginx-ingress-admission
webhooks:
  - name: validate.nginx.ingress.kubernetes.io
    matchPolicy: Equivalent
    rules:
      - apiGroups:
          - networking.k8s.io
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - ingresses
    failurePolicy: Fail
    sideEffects: None
    admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: open-appsec-open-appsec-k8s-nginx-ingress-controller-admission
        namespace: choreo-ingress-controllers
        port: 443
        path: /networking/v1/ingresses
---
# Source: open-appsec-k8s-nginx-ingress/templates/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: open-appsec-open-appsec-k8s-nginx-ingress-admission
  namespace: choreo-ingress-controllers
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
automountServiceAccountToken: false
---
# Source: open-appsec-k8s-nginx-ingress/templates/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: open-appsec-open-appsec-k8s-nginx-ingress-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - get
      - update
---
# Source: open-appsec-k8s-nginx-ingress/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: open-appsec-open-appsec-k8s-nginx-ingress-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: open-appsec-open-appsec-k8s-nginx-ingress-admission
subjects:
  - kind: ServiceAccount
    name: open-appsec-open-appsec-k8s-nginx-ingress-admission
    namespace: choreo-ingress-controllers
---
# Source: open-appsec-k8s-nginx-ingress/templates/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: open-appsec-open-appsec-k8s-nginx-ingress-admission
  namespace: choreo-ingress-controllers
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: open-appsec-k8s-nginx-ingress/templates/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: open-appsec-open-appsec-k8s-nginx-ingress-admission
  namespace: choreo-ingress-controllers
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: open-appsec-open-appsec-k8s-nginx-ingress-admission
subjects:
  - kind: ServiceAccount
    name: open-appsec-open-appsec-k8s-nginx-ingress-admission
    namespace: choreo-ingress-controllers
---
# Source: open-appsec-k8s-nginx-ingress/templates/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: open-appsec-open-appsec-k8s-nginx-ingress-admission-create
  namespace: choreo-ingress-controllers
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      name: open-appsec-open-appsec-k8s-nginx-ingress-admission-create
      labels:
        helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
        app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
        app.kubernetes.io/instance: open-appsec
        app.kubernetes.io/version: "1.1.27"
        app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: create
          image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.6.0@sha256:c9f76a75fd00e975416ea1b73300efd413116de0de8570346ed90766c5b5cefb
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=open-appsec-open-appsec-k8s-nginx-ingress-controller-admission,open-appsec-open-appsec-k8s-nginx-ingress-controller-admission.$(POD_NAMESPACE).svc
            - --namespace=$(POD_NAMESPACE)
            - --secret-name=open-appsec-open-appsec-k8s-nginx-ingress-admission
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          resources: 
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
      restartPolicy: OnFailure
      serviceAccountName: open-appsec-open-appsec-k8s-nginx-ingress-admission
      nodeSelector: 
        kubernetes.io/os: linux
      securityContext: 
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
        seccompProfile:
          type: RuntimeDefault
---
# Source: open-appsec-k8s-nginx-ingress/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: open-appsec-open-appsec-k8s-nginx-ingress-admission-patch
  namespace: choreo-ingress-controllers
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
    app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/instance: open-appsec
    app.kubernetes.io/version: "1.1.27"
    app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      name: open-appsec-open-appsec-k8s-nginx-ingress-admission-patch
      labels:
        helm.sh/chart: open-appsec-k8s-nginx-ingress-1.1.27
        app.kubernetes.io/name: open-appsec-k8s-nginx-ingress
        app.kubernetes.io/instance: open-appsec
        app.kubernetes.io/version: "1.1.27"
        app.kubernetes.io/part-of: open-appsec-k8s-nginx-ingress
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: patch
          image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.6.0@sha256:c9f76a75fd00e975416ea1b73300efd413116de0de8570346ed90766c5b5cefb
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=open-appsec-open-appsec-k8s-nginx-ingress-admission
            - --namespace=$(POD_NAMESPACE)
            - --patch-mutating=false
            - --secret-name=open-appsec-open-appsec-k8s-nginx-ingress-admission
            - --patch-failure-policy=Fail
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          resources: 
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi

      restartPolicy: OnFailure
      serviceAccountName: open-appsec-open-appsec-k8s-nginx-ingress-admission
      nodeSelector: 
        kubernetes.io/os: linux
      securityContext: 
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
        seccompProfile:
          type: RuntimeDefault
